/**
 * \file dictionnaire.h
 * \brief Implantation du TAD Dictionnaire
 * \version 1.0
 */

#ifndef __DICTIONNAIRE_H__
#define __DICTIONNAIRE_H__

#include "mot.h"
#include "listeDeMot.h"

// taille maximale d'un mot
// (e.g., anticonstitutionnellement)
#define MAX_WORD_SIZE 30

// Distance maximale autorisé entre une branche et ses sous branches
#define MAX_CHILDREN 26

// Nombre de mots proches maximal autorisée
#define MAX_SIMILAR_WORDS 6

#define MAX(x, y) (((x) > (y)) ? (x) : (y))
#define MIN(x, y) (((x) < (y)) ? (x) : (y))

typedef struct Node //stored information about our node
{
    struct Node *children[MAX_CHILDREN];
    char word[MAX_WORD_SIZE];
} Node;

/**
* \fn unsigned int Dictionnaire_charger(const char *dictionary, Node **arbre);
* \brief Crée l'arbre bk-tree correspondant au fichier dictionnary
* \param const char *dictionary : le fichier contenant les mots à ajouter à l'arbre
* \param Node **arbre : l'arbre en question
* \return unsigned int : 1 si l'arbre a pu être crée, 0 sinon
* \author Djan Yigit
*/
unsigned int Dictionnaire_charger(const char *dictionary, Node **arbre);

/**
 * Save dictionary into memory.  Returns true if successful else false.
 */
unsigned int Dictionnaire_sauvegarder(char *filename, Node *arbre);

/**
* \fn unsigned int Correcteur_estPresent(Node **arbre, Mot mot);
* \brief Détermine si un mot est présent dans un arbre
* \param Node **arbre : La liste en question
* \param Mot mot : le mot en question
* \return unsigned int : 1 si le mot est présent dans l'arbre, 0 sinon
* \author Yigit Djan
*/
unsigned int Dictionnaire_estPresent(Node **arbre, Mot mot);

/**
* \fn unsigned int Dictionnaire_longueur(void);
* \brief Renvoi la longueur d'un dictionnaire
* \return int : Le nombre de mot dans le dictionnaire
* \author Yigit Djan
*/
unsigned int Dictionnaire_longueur(void);

/**
* \fn unsigned int Dictionnaire_liberer(Node *abre);
* \brief Libère la mémoire d'un arbre n-aire
* \param Node *abre : L'arbre en question
* \return unsigned int : 1 si l'arbre a ete libéré, 0 sinon
* \author Yigit Djan
*/
unsigned int Dictionnaire_liberer(Node *abre);

#endif // __DICTIONNAIRE_H__
